{"version":3,"sources":["components/file-uploader/file-uploader.tsx","utils/sound.ts","components/visuals/visuals.tsx","components/player.tsx","components/unsuported/unsupported.tsx","containers/App/App.tsx","index.tsx"],"names":["Uploader","onFileChosen","inputRef","React","onInputChange","e","files","target","length","current","addEventListener","removeEventListener","className","ref","type","id","accept","avg","arr","reduce","sum","b","RENDERED_OBJECTS","BAR","maxHeight","CIRCLE","radius","width","Visual","canvasRef","canvasCtx","onWindowResize","document","documentElement","clientWidth","height","clientHeight","animate","requestAnimationFrame","bufferLength","props","analyser","frequencyBinCount","avgBuffer","dataArray","circleLineWidth","ctx","rotation","barWidth","Math","PI","getByteFrequencyData","clearBackground","drawCircle","i","barHeight","drawBar","restore","canvas","clearRect","fillStyle","fillRect","lineWidth","cx","cy","beginPath","arc","strokeStyle","closePath","stroke","save","translate","fixedBarHeight","rotate","this","getContext","window","Player","audioRef","audioContext","setSong","fileURL","a","currentTrackSrc","URL","createObjectURL","src","load","play","AudioCtx","AudioContext","webkitAudioContext","createMediaElementSource","createAnalyser","connect","destination","fftSize","Uint8Array","onFileLoaded","onAudioError","console","warn","onerror","style","bottom","left","position","zIndex","controls","Unsupported","role","aria-label","App","state","playerRef","onFilesChosen","setState","file","meta","isBrowserSupported","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.42ae62ff.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport './file-uploader.css';\n\ninterface IUploaderProps {\n    onFileChosen(files: FileList): void;\n}\n\nexport const Uploader: React.FC<IUploaderProps> = ({ onFileChosen }: IUploaderProps) => {\n    const inputRef = React.useRef<HTMLInputElement>(null);\n\n    const onInputChange = (e: Event) => {\n        const files = (e.target as HTMLInputElement).files;\n        if (files === null || !files.length) {\n            return;\n        }\n\n        onFileChosen(files);\n    };\n\n    React.useEffect(() => {\n        (inputRef.current as HTMLInputElement).addEventListener('change', onInputChange);\n        return () => {\n            (inputRef.current as HTMLInputElement).removeEventListener('change', onInputChange);\n        };\n    }, []);\n\n\n    return (\n        <div className=\"uploader\">\n            <input ref={inputRef} type=\"file\" id=\"music-file\" accept=\"audio/*\" />\n        </div>\n    );\n};\n","/** \n * \n * Sound Math stuff\n * \n * Based on https://codepen.io/prakhar625/pen/zddKRj?editors=0010s\n * \n*/\n\nexport function fractionate(val: number, minVal: number, maxVal: number) {\n    return (val - minVal) / (maxVal - minVal);\n}\n\nexport function modulate(val: number, minVal: number, maxVal: number, outMin: number, outMax: number) {\n    const fr = fractionate(val, minVal, maxVal);\n    const delta = outMax - outMin;\n    return outMin + (fr * delta);\n}\n\nexport function avg(arr: number[]) {\n    const total: number = arr.reduce((sum: number, b: number) => (sum + b));\n    return (total / arr.length);\n}\n\nexport function max(arr: number[]) {\n    return arr.reduce((a: number, b: number) => (Math.max(a, b)));\n}\n\nexport function analyzeSound(dataArray: number[]) {\n    const lowerHalfArray = dataArray.slice(0, (dataArray.length / 2) - 1);\n    const upperHalfArray = dataArray.slice((dataArray.length / 2) - 1, dataArray.length - 1);\n\n    const overallAvg = avg(dataArray);\n    const lowerMax = max(lowerHalfArray);\n    const lowerAvg = avg(lowerHalfArray);\n    const upperMax = max(upperHalfArray);\n    const upperAvg = avg(upperHalfArray);\n\n    const lowerMaxFr = lowerMax / lowerHalfArray.length;\n    const lowerAvgFr = lowerAvg / lowerHalfArray.length;\n    const upperMaxFr = upperMax / upperHalfArray.length;\n    const upperAvgFr = upperAvg / upperHalfArray.length;\n\n    return {\n        lowerAvg,\n        lowerAvgFr,\n        lowerMax,\n        lowerMaxFr,\n        overallAvg,\n        upperAvg,\n        upperAvgFr,\n        upperMax,\n        upperMaxFr\n    };\n}","import * as React from 'react';\n\nimport { IDataCallback } from '../player';\nimport './visuals.css';\nimport { avg } from 'src/utils/sound';\n\nconst RENDERED_OBJECTS = {\n    BAR: {\n        maxHeight: 250\n    },\n    CIRCLE: {\n        radius: 150,\n        width: 15\n    }\n};\n\ninterface IVisualsProps extends IDataCallback { }\n\nexport class Visual extends React.Component<IVisualsProps> {\n    private canvasRef: HTMLCanvasElement;\n    private canvasCtx: CanvasRenderingContext2D;\n\n    componentDidMount() {\n        const width = document.documentElement.clientWidth;\n        const height = document.documentElement.clientHeight;\n\n        this.canvasRef.height = height;\n        this.canvasRef.width = width;\n\n        this.canvasCtx = this.canvasRef.getContext('2d')!;\n\n        window.addEventListener('resize', this.onWindowResize);\n\n        requestAnimationFrame(this.animate);\n    }\n\n    onWindowResize = () => {\n        this.canvasRef.width = document.documentElement.clientWidth;\n        this.canvasRef.height = document.documentElement.clientHeight;\n    }\n\n    animate = () => {\n        requestAnimationFrame(this.animate);\n        const bufferLength = this.props.analyser!.frequencyBinCount;\n\n        const avgBuffer = avg((this.props as any).dataArray);\n        const circleLineWidth = avgBuffer < RENDERED_OBJECTS.CIRCLE.width ? RENDERED_OBJECTS.CIRCLE.width : avgBuffer;\n\n        const ctx = this.canvasCtx;\n\n        let rotation = 0;\n\n        const rectLength = RENDERED_OBJECTS.CIRCLE.radius * 2 * Math.PI;\n        const barWidth = (rectLength / bufferLength);\n\n        this.props.analyser!.getByteFrequencyData(this.props.dataArray!);\n\n        this.clearBackground();\n        this.drawCircle(circleLineWidth);\n\n        for (let i = 0; i < bufferLength; i++) {\n            const barHeight = this.props.dataArray![i];\n\n            this.drawBar(rotation, barHeight, barWidth);\n\n            rotation = (rotation / (bufferLength + barWidth)) % 360 + 1;\n        }\n\n        ctx.restore();\n    }\n\n    private clearBackground = () => {\n        const canvas = this.canvasRef;\n        const ctx = this.canvasCtx;\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        ctx.fillStyle = 'black';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    private drawCircle = (lineWidth: number) => {\n        const canvas = this.canvasRef;\n        const ctx = this.canvasCtx;\n\n        const WIDTH = canvas.width;\n        const HEIGHT = canvas.height;\n\n        const cx = WIDTH / 2;\n        const cy = HEIGHT / 2;\n\n        ctx.beginPath();\n        ctx.arc(cx, cy, RENDERED_OBJECTS.CIRCLE.radius, 0, Math.PI * 2);\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = '#fff';\n        ctx.closePath();\n        ctx.stroke();\n        ctx.save();\n\n        ctx.translate(cx, cy);\n    }\n\n    private drawBar = (rotation: number, barHeight: number, barWidth: number) => {\n        const ctx = this.canvasCtx;\n        const fixedBarHeight = barHeight > RENDERED_OBJECTS.BAR.maxHeight ? RENDERED_OBJECTS.BAR.maxHeight : barHeight;\n\n        ctx.rotate(rotation);\n        ctx.fillStyle = '#fff';\n        ctx.fillRect(RENDERED_OBJECTS.CIRCLE.radius + 100, -barWidth / 2, fixedBarHeight, barWidth);\n    }\n\n    render() {\n        return (\n            <canvas id=\"mu-vis-visualization\" ref={ref => this.canvasRef = ref!} width={'100%'} height={'100%'} />\n        );\n    }\n}","import * as React from 'react';\nimport { Visual } from './visuals/visuals';\n\ninterface ITrack {\n    src: string;\n    dataArray: Uint8Array;\n}\n\nexport interface IDataCallback {\n    dataArray?: Uint8Array;\n    analyser?: AnalyserNode;\n}\n\ninterface IPlayerProps {\n    onFileLoaded(data: IDataCallback): void;\n}\n\ninterface IPlayerState { }\n\nexport class Player extends React.Component<IPlayerProps, IPlayerState> {\n\n\n    private readonly audioRef: React.RefObject<HTMLAudioElement>;\n    private audioContext: AudioContext;\n    private analyser: AnalyserNode;\n\n    private dataArray: Uint8Array;\n\n    constructor(props: IPlayerProps) {\n        super(props);\n\n        this.audioRef = React.createRef<HTMLAudioElement>();\n    }\n\n    componentDidMount() {\n        (this.audioRef.current as HTMLAudioElement).onerror = this.onAudioError;\n    }\n\n    public setSong = async (fileURL: object) => {\n        const currentTrackSrc = URL.createObjectURL(fileURL);\n\n        (this.audioRef.current as HTMLAudioElement).src = currentTrackSrc;\n        (this.audioRef.current as HTMLAudioElement).load();\n        (this.audioRef.current as HTMLAudioElement).play();\n\n        if (!this.audioContext) {\n            const AudioCtx = (window as any).AudioContext\n                || (window as any).webkitAudioContext;\n\n            this.audioContext = new AudioCtx();\n            const src = this.audioContext.createMediaElementSource(this.audioRef.current as HTMLAudioElement);\n            this.analyser = this.audioContext.createAnalyser();\n\n            src.connect(this.analyser);\n            this.analyser.connect(this.audioContext.destination);\n        }\n\n        this.analyser.fftSize = 256;\n\n        const bufferLength = this.analyser.frequencyBinCount;\n\n        this.dataArray = new Uint8Array(bufferLength);\n\n        this.props.onFileLoaded({\n            analyser: this.analyser,\n            dataArray: this.dataArray\n        });\n    }\n\n    private onAudioError = (e: string | Event) => {\n        console.warn(e);\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.analyser && this.dataArray && (\n                        <Visual\n                            analyser={this.analyser}\n                            dataArray={this.dataArray}\n                        />\n                    )\n                }\n\n                <audio style={{\n                    bottom: 0,\n                    left: 0,\n                    position: 'absolute',\n                    zIndex: 9,\n                }} ref={this.audioRef} id=\"audio\" controls></audio>\n\n            </div>\n        );\n    }\n}","import * as React from 'react';\n\nimport './unsupported.css';\n\nexport const Unsupported: React.FC = () => (\n    <div className=\"unsupported-message\">\n        <h1 className=\"unsupported-message__title\">Sorry, your browser is not supported.</h1>\n        <h2 className=\"unsupported-message__title\">\n            <span role=\"img\" aria-label=\"\">😥</span>\n        </h2>\n    </div>\n);\n","import * as React from 'react';\nimport './App.css';\n\nimport { Uploader } from 'src/components/file-uploader/file-uploader';\nimport { Player, IDataCallback } from 'src/components/player';\nimport { Unsupported } from 'src/components/unsuported/unsupported';\n\ninterface IAppState {\n    file?: File;\n    meta?: IDataCallback;\n}\n\nexport class App extends React.Component<{}, IAppState> {\n    state: IAppState = {}\n\n    private playerRef: Player;\n\n    private onFilesChosen = async (files: FileList) => {\n        await this.setState({\n            file: files[0]\n        });\n\n        this.playerRef.setSong(files[0]);\n    }\n\n    private onFileLoaded = (meta: IDataCallback) => {\n        this.setState({\n            meta\n        });\n    }\n\n    render() {\n        const isBrowserSupported = !!(window as any).AudioContext;\n        return (\n            <div className=\"App\">\n                {\n                    isBrowserSupported ?\n                        (\n                            <>\n                                <Uploader onFileChosen={this.onFilesChosen} />\n                                {\n                                    this.state.file && (\n                                        <Player\n                                            ref={ref => this.playerRef = ref!}\n                                            onFileLoaded={this.onFileLoaded} />\n                                    )\n                                }\n                            </>\n                        )\n                        :\n                        (\n                            <Unsupported />\n                        )\n                }\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { App } from './containers/App/App';\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root') as HTMLElement\n);\n"],"sourceRoot":""}